------------
libcomm14cux
https://github.com/colinbourassa/libcomm14cux

Download latest release:
https://github.com/colinbourassa/libcomm14cux/releases/latest
------------

libcomm14cux is a cross-platform library that is capable of communicating with
the Lucas 14CUX ECU via its diagnostic serial port. An FTDI-based interface is
required to match the ECU's signaling; the hardware is beyond the scope of this
document and detailed on the following web site:

https://github.com/colinbourassa/libcomm14cux/blob/wiki/HardwareInterface.md

The library itself has no user-interface and requires a front-end application
to display data. Included in this archive is a simple command-line utility
(named "read14cux") which uses the library to read and display bytes from the
14CUX's memory. The RoverGauge project provides a graphical front-end to this
library:

https://github.com/colinbourassa/rovergauge

Comments, questions, bug reports, and bugfixes should be directed to
colin.bourassa@gmail.com. Please include the version number of the library in
any correspondence.

-------
License
-------
libcomm14cux is licensed under the GPL v3. See the file "LICENSE" for details.

----------
Disclaimer
----------
While this software has been shown to be reliable and is provided in good
faith, it is provided with ABSOLUTELY NO WARRANTY.

---------
Changelog
---------
3.0.0: Major rewrite; switch to libftdi instead of using termios/WinAPI
2.1.1: Switched to a lookup table for coolant and fuel temperature sensors.
       This should yield slightly more accurate results.
2.1.0: Modified getFuelMap() routine to also return the row scaler value for
       the specified map
2.0.2: Updated release URLs in README
2.0.1: Added better support for cross-compiling to Windows using MXE
2.0.0: Added support for nonstandard baud rates (i.e. other than 7812.5 bps)
       Added preliminary support for AC compressor and heated screen status

-------------
Compatibility
-------------
libcomm14cux has been tested with the following operating systems at some
point in its history:

* Linux (i686 and x86_64)
* Windows XP / 7 / 10 / 11

---------------
Using read14cux
---------------
The libcomm14cux library must be visible to the read14cux executable for it to
run. (In Windows, the most straightforward way to do this is to ensure that the
DLL and read14cux.exe are in the same directory.)

The read14cux utility reads a specified number of bytes from a specified memory
location in the ECU, and will either display those bytes at the console (16
bytes per line), or, if an output filename is given, write the bytes to a file.

Currently, read14cux selects the first available FTDI device connected to your
system.

The read14cux command line parameters are as follows:

  read14cux [-b baud-rate] <address> <length> [output-file]

  baud-rate:
    Optional parameter, prefixed with '-b' if present. Sets the baud rate used
    when communicating with the ECU. This is only useful if your ECU is running
    customized firmware that supports a higher baud rate.

  address:
    Memory address at which to start reading data. This should be specified in
    hex (using the "0x" prefix, as in "0xC000".)

  length:
    Number of bytes to read.

  output-file:
    Optional. If given, the file to which the bytes will be written (rather than
    to the console.)

------------------------------------------
Issues with writing to memory in the 14CUX
------------------------------------------
Write operations are of limited usefulness. Fuel maps cannot be changed in this
way because they are read from the ROM, and sensor readings are continually
updated by the ECU (meaning that any change to the memory location of a sensor
value would almost immediately be overwritten.)

Care should be taken when writing memory while the engine is running; it's
possible to affect the operation of the fuel pump or idle-control stepper motor
in this way.

(EOF)
